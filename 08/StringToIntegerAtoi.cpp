//
// Created by Nikhil on 30-04-2021.
//

#include <iostream>
#include "StringToIntegerAtoi.h"

int StringToIntegerAtoi::myAtoi(const std::string &str) {
    bool isPositive = true;
    int ans = 0;
    if (str.length() == 0) {
        return 0;
    }
    int index = 0;
    while (index < str.length() && isspace(str[index])) { index++; }
    if (index < str.length() && (str[index] == '+' || str[index] == '-')) {
        isPositive = str[index] != '-';
        index++;
    }
    while (index < str.length() && isdigit(str[index])) {
        if (ans > INT_MAX / 10 || (ans == INT_MAX / 10 && (str[index] - '0') > INT_MAX % 10)) {
            return isPositive ? INT_MAX : INT_MIN;
        }
        ans *= 10;
        ans += str[index] - '0';
        index++;
    }
    return isPositive ? ans : -ans;
}

/*
 * Some test case
 * "-6236993625778478377"
"-37294076638799751"
"-7669294763643149036"
"-992529383636503424"
"-2930854218035419416"
"-5661621782305205691"
"-7996457209680057527"
"-8895791107298099393"
"-364958522614983376"
"-8980002978119305424"
"-256686616623308475"
"-9150237347323100092"
"-2913104667124814423"
"-426926454339170368"
"-7865470771160421113"
"-7574753191470016193"
"-8102869029703937730"
"-9127392142327598604"
"-459539865956330887"
"-2143415387200736265"
"-4251813815050449709"
"-7666242456671036278"
"-5437828277336729844"
"-5028566015723747249"
"-2595138959504658602"
"-3791877551154842171"
"-2337141131424330044"
"-9026148668226281422"
"-6182184951087132540"
"-6548594658724313787"
"-2054937845416301661"
"-663037773507282713"
"-159625089778625843"
"-1190877135967075951"
"-2537897847164856283"
"-2704854107685843911"
"-3270132288663372467"
"-6411851096693592968"
"-5044592244520927725"
"-1419782696458132364"
"-4188398764825192437"
"-7524204428812644725"
"-9217806350465803573"
"-8126455779033856341"
"-4048501866430242135"
"-905832296132868906"
"-2643341166606687212"
"-8842044202620088281"
"-9140497112439356109"
"-6621736323236288506"
"-2353115763427181968"
"-233425081750300092"
"-2010624318999882880"
"-2807741832734488332"
"-6545990362289597808"
"-8497566783646554780"
"-5679186815580936457"
 "1905016261"
"589985954"
"-190522600"
"1915713996"
"1290450718"
"-1915653968"
"1354811584"
"-1534681869"
"476397784"
"1565794716"
"1925290581"
"450845097"
"2092774946"
"-633920372"
"1685358244"
"548233816"
"-441509085"
"898469135"
"-1650367272"
"1504284877"
"562069295"
"-1566241735"
"-1988513926"
"-462433566"
"-1449919710"
"560422646"
"354931649"
"-44362285"
"-861830224"
"-1208709607"
"-122223697"
"1903660712"
"418363163"
"-1721376008"
"1160707097"
"410116816"
"1845471194"
"-799473323"
"-1338770245"
"197846385"
"449029226"
"1533969768"
"-808942699"
"1615418339"
"1764252137"
"2083640079"
"1883289120"
"-1983326559"
"858514181"
"-1410877049"
"244370537"
"789389008"
"-1938148472"
"434920563"
"1395881500"
"-792857983"
"-1027662312"
"-584206094"
"1586015727"
"382298601"
"124948600"
"370946668"
"1673533274"
"1220702341"
"-1172915934"
"-79302256"
"-1203094948"
"-707847781"
"1592085426"
"-1444639844"
"793248826"
"-261433755"
"-1496389664"
"-599264044"
"-85636201"
"-1145182622"
"-1006619820"
"-1594864637"
"170217159"
"1026216956"
"-1011520415"
"-1254491305"
"1201604860"
"-2034642938"
"419785231"
"-1547817866"
"-1098572431"
"511962800"
"425106416"
"655385243"
"52093028"
"-1576663185"
"-607210544"
"1802511538"
"1142884940"
"576513671"
"-1438564445"
"1323129927"
"-273967311"
"-32273162"
 "-1188"
"-510"
"-1039"
"-1020"
"875"
"478"
"908"
"-1238"
"-508"
"92"
"1233"
"321"
"754"
"-915"
"489"
"362"
"-519"
"-1116"
"1222"
"959"
"-678"
"-692"
"-1166"
"-1153"
"-383"
"815"
"-271"
"-141"
"-460"
"103"
"583"
"598"
"-169"
"1223"
"-1211"
"-977"
"-573"
"368"
"-884"
"-444"
"-462"
"56"
"-240"
"176"
"-1150"
"136"
"604"
"1147"
"-1189"
"-363"
"-550"
"276"
"992"
"1135"
"1216"
"-487"
"502"
"215"
"767"
"-1233"
"-827"
"-736"
"-968"
"462"
"841"
"-614"
"-319"
"-904"
"-1013"
"-725"
"-806"
"62"
"-940"
"-110"
"-403"
"-867"
"95"
"-1181"
"-1146"
"248"
"23"
"861"
"752"
"167"
"1004"
"-128"
"87"
"1085"
"-652"
"1079"
"-485"
"1205"
"-1020"


 input

 int no_of_times_to_run = 100;
    int i = 0;

    while (i != no_of_times_to_run) {
        long long longNumber = getRandomLong();
     int longNumber = getRandomNumber(INT_MAX);
    string longNumber = getRandomString(20);

        auto start = std::chrono::high_resolution_clock::now();


        int answer = StringToIntegerAtoi::myAtoi(to_string(longNumber));
        std::cout << longNumber << " " << answer << endl;
        if (longNumber > INT_MAX) {
            longNumber = INT_MAX;
        } else if (longNumber < INT_MIN) {
            longNumber = INT_MIN;
        }
        assert(longNumber== answer);
        auto stop = std::chrono::high_resolution_clock::now();
        auto duration = duration_cast<nanoseconds>(stop - start);
        std::cout << "Time taken by function: "
                  << duration.count() << " nanosecond\n" << endl;
        i++;
    }
 */